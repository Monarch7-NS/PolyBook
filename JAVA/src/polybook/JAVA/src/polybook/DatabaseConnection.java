package polybook;

import java.sql.*;
import java.util.Properties;

/**
 * Gestionnaire de connexion √† la base de donn√©es MySQL pour PolyBook
 * Configuration adapt√©e selon les param√®tres PHP
 */
public class DatabaseConnection {
    
    // ‚úÖ CONFIGURATION ADAPT√âE √Ä VOS PARAM√àTRES PHP
    private static final String URL = "jdbc:mysql://localhost:3306/polybook";
    private static final String USERNAME = "root";
    private static final String PASSWORD = "root"; // ‚úÖ Correspond √†  $motdepasse
    
    private static Connection connection = null;
    private static boolean isConnected = false;
    
    /**
     * Obtient la connexion √† la base de donn√©es (Singleton)
     */
    public static Connection getConnection() {
        try {
            if (connection == null || connection.isClosed() || !connection.isValid(5)) {
                createConnection();
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erreur lors de la v√©rification de la connexion: " + e.getMessage());
            createConnection();
        }
        return connection;
    }
    
    /**
     * Cr√©e une nouvelle connexion √† la base de donn√©es
     */
    private static void createConnection() {
        try {
            // Charger le driver MySQL
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Propri√©t√©s de connexion optimis√©es
            Properties props = new Properties();
            props.setProperty("user", USERNAME);
            props.setProperty("password", PASSWORD);
            props.setProperty("useSSL", "false");
            props.setProperty("serverTimezone", "UTC");
            props.setProperty("allowPublicKeyRetrieval", "true");
            props.setProperty("useUnicode", "true");
            props.setProperty("characterEncoding", "UTF-8");
            
            // √âtablir la connexion
            connection = DriverManager.getConnection(URL, props);
            isConnected = true;
            
            System.out.println("üîó Connexion √† la base de donn√©es √©tablie");
            System.out.println("üìç Serveur: localhost:3306");
            System.out.println("üóÑÔ∏è  Base de donn√©es: polybook");
            System.out.println("üë§ Utilisateur: " + USERNAME);
            
        } catch (ClassNotFoundException e) {
            System.err.println("‚ùå Driver MySQL introuvable!");
            System.err.println("   V√©rifiez que mysql-connector-java-8.0.33.jar est dans lib/");
            System.err.println("   T√©l√©chargez-le depuis: https://dev.mysql.com/downloads/connector/j/");
            isConnected = false;
        } catch (SQLException e) {
            System.err.println("‚ùå Erreur de connexion √† la base de donn√©es:");
            System.err.println("   Message: " + e.getMessage());
            System.err.println("   Code d'erreur: " + e.getErrorCode());
            System.err.println("   √âtat SQL: " + e.getSQLState());
            System.err.println();
            System.err.println("üîß V√©rifications sugg√©r√©es:");
            System.err.println("   1. MySQL est-il d√©marr√© ?");
            System.err.println("   2. La base 'polybook' existe-t-elle ?");
            System.err.println("   3. L'utilisateur 'root' avec mot de passe 'root' est-il correct ?");
            System.err.println("   4. Le port 3306 est-il accessible ?");
            isConnected = false;
        }
    }
    
    /**
     * Ferme la connexion √† la base de donn√©es
     */
    public static void closeConnection() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                isConnected = false;
                System.out.println("üîå Connexion ferm√©e proprement");
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Erreur lors de la fermeture: " + e.getMessage());
        }
    }
    
    /**
     * Teste la connexion √† la base de donn√©es
     */
    public static boolean testConnection() {
        try {
            Connection conn = getConnection();
            if (conn != null && !conn.isClosed()) {
                // Test avec une requ√™te simple sur la base polybook
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery("SELECT COUNT(*) as total FROM user");
                
                boolean hasResult = rs.next();
                int userCount = hasResult ? rs.getInt("total") : 0;
                
                rs.close();
                stmt.close();
                
                if (hasResult) {
                    System.out.println("‚úÖ Test de connexion r√©ussi");
                    System.out.println("üìä Nombre d'utilisateurs dans la base: " + userCount);
                    return true;
                } else {
                    System.err.println("‚ùå Test de connexion √©chou√© - Pas de r√©sultat");
                    return false;
                }
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Test de connexion √©chou√©: " + e.getMessage());
            
            // Messages d'aide sp√©cifiques selon l'erreur
            if (e.getMessage().contains("Access denied")) {
                System.err.println("   ‚Üí V√©rifiez vos identifiants (root/root)");
            } else if (e.getMessage().contains("Connection refused")) {
                System.err.println("   ‚Üí MySQL n'est pas d√©marr√© ou port incorrect");
            } else if (e.getMessage().contains("Unknown database")) {
                System.err.println("   ‚Üí La base de donn√©es 'polybook' n'existe pas");
            }
        }
        return false;
    }
    
    /**
     * V√©rifie si la connexion est active
     */
    public static boolean isConnected() {
        return isConnected && connection != null;
    }
    
    /**
     * Affiche les informations de la base de donn√©es
     */
    public static void printDatabaseInfo() {
        try {
            Connection conn = getConnection();
            if (conn != null) {
                DatabaseMetaData metaData = conn.getMetaData();
                System.out.println("üìä Informations de la base de donn√©es:");
                System.out.println("   Nom: " + metaData.getDatabaseProductName());
                System.out.println("   Version: " + metaData.getDatabaseProductVersion());
                System.out.println("   Driver: " + metaData.getDriverName());
                System.out.println("   Version du driver: " + metaData.getDriverVersion());
                System.out.println("   URL: " + URL);
            }
        } catch (SQLException e) {
            System.err.println("‚ùå Impossible d'obtenir les infos de la DB: " + e.getMessage());
        }
    }
}
